class MedianFinder {
    
    PriorityQueue<Integer> lowerHalf;
    PriorityQueue<Integer> upperHalf;

    public MedianFinder() {
        lowerHalf = new PriorityQueue<>((a,b) -> b - a);
        upperHalf = new PriorityQueue<>(); 
       
    }
    
    public void addNum(int num) {
        if(lowerHalf.isEmpty() || num <= lowerHalf.peek()){
            lowerHalf.add(num);
        }else{
            upperHalf.add(num);
        }
    
        if(upperHalf.size() > lowerHalf.size()){ 
            lowerHalf.add(upperHalf.poll());
        } else if(lowerHalf.size() > upperHalf.size() + 1){

            upperHalf.add(lowerHalf.poll());
        }
    }
    
    public double findMedian() {
        if(lowerHalf.size() == upperHalf.size()){
            return (double)(lowerHalf.peek() + upperHalf.peek())/2;
        }else{
             return (double)(lowerHalf.peek());
        }
    }
}
